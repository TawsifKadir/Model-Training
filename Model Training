{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":12511526,"sourceType":"datasetVersion","datasetId":7897095}],"dockerImageVersionId":31089,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Test Cell","metadata":{}},{"cell_type":"code","source":"import os\nimport numpy as np\nimport pandas as pd\n\n# Root path to your dataset\ndataset_root = '/kaggle/input/puma-dataset/PUMA'\n\n# Recursively walk through all subdirectories and print files\nfor foldername, subfolders, filenames in os.walk(dataset_root):\n    print(f\"\\nüìÅ Folder: {foldername}\")\n    for filename in filenames:\n        file_path = os.path.join(foldername, filename)\n        print(f\"  ‚îî‚îÄ‚îÄ {file_path}\")","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Load dataset into arrays","metadata":{}},{"cell_type":"code","source":"import os\nimport cv2\n\nbase_path = '/kaggle/input/puma-dataset/PUMA'\n\n# Define full folder paths\nnuclei_geojson_path = os.path.join(base_path, '01_training_dataset_geojson_nuclei')\ntissue_geojson_path = os.path.join(base_path, '01_training_dataset_geojson_tissue', '01_training_dataset_geojson_tissue')\nroi_tif_path = os.path.join(base_path, '01_training_dataset_tif_ROIs', '01_training_dataset_tif_ROIs')\ncontext_tif_path = os.path.join(base_path, '01_training_dataset_tif_context_ROIs', '01_training_dataset_tif_context_ROIs')\n\n# Load all files into separate arrays (sorted to align indices)\nnuclei_files = sorted([os.path.join(nuclei_geojson_path, f) for f in os.listdir(nuclei_geojson_path) if f.endswith('.geojson')])\ntissue_files = sorted([os.path.join(tissue_geojson_path, f) for f in os.listdir(tissue_geojson_path) if f.endswith('.geojson')])\nroi_tif_files = sorted([os.path.join(roi_tif_path, f) for f in os.listdir(roi_tif_path) if f.endswith('.tif')])\ncontext_tif_files = sorted([os.path.join(context_tif_path, f) for f in os.listdir(context_tif_path) if f.endswith('.tif')])\n\n# Sanity check\nprint(\"üß† Nuclei:\", nuclei_files[0])\nprint(\"üß´ Tissue:\", tissue_files[0])\nprint(\"üñºÔ∏è  ROI TIF:\", roi_tif_files[0])\nprint(\"üåç Context TIF:\", context_tif_files[0])\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-23T12:53:39.094263Z","iopub.execute_input":"2025-08-23T12:53:39.094560Z","iopub.status.idle":"2025-08-23T12:53:39.417700Z","shell.execute_reply.started":"2025-08-23T12:53:39.094537Z","shell.execute_reply":"2025-08-23T12:53:39.416814Z"}},"outputs":[{"name":"stdout","text":"üß† Nuclei: /kaggle/input/puma-dataset/PUMA/01_training_dataset_geojson_nuclei/training_set_metastatic_roi_001_nuclei.geojson\nüß´ Tissue: /kaggle/input/puma-dataset/PUMA/01_training_dataset_geojson_tissue/01_training_dataset_geojson_tissue/training_set_metastatic_roi_001_tissue.geojson\nüñºÔ∏è  ROI TIF: /kaggle/input/puma-dataset/PUMA/01_training_dataset_tif_ROIs/01_training_dataset_tif_ROIs/training_set_metastatic_roi_001.tif\nüåç Context TIF: /kaggle/input/puma-dataset/PUMA/01_training_dataset_tif_context_ROIs/01_training_dataset_tif_context_ROIs/training_set_metastatic_roi_001_context.tif\n","output_type":"stream"}],"execution_count":2}]}